// --------------------------------------------------------------------------------------------
// The following code is automatically generated by the gen-mongo-dao tool.
// Please do not modify this code manually to avoid being overwritten in the next generation.
// For more tool details, please click the link to view https://github.com/dobyte/gen-mongo-dao
// --------------------------------------------------------------------------------------------

package internal

import (
	"context"
	"due-mahjong-server/shared/model/mail"
	"errors"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type FilterFunc func(cols *Columns) interface{}
type UpdateFunc func(cols *Columns) interface{}
type FindOneOptionsFunc func(cols *Columns) *options.FindOneOptions
type FindManyOptionsFunc func(cols *Columns) *options.FindOptions
type UpdateOptionsFunc func(cols *Columns) *options.UpdateOptions
type DeleteOptionsFunc func(cols *Columns) *options.DeleteOptions
type InsertOneOptionsFunc func(cols *Columns) *options.InsertOneOptions
type InsertManyOptionsFunc func(cols *Columns) *options.InsertManyOptions

type Mail struct {
	Columns    *Columns
	Database   *mongo.Database
	Collection *mongo.Collection
}

type Columns struct {
	ID          string
	Title       string
	Content     string
	Sender      string
	Receiver    string
	Attachments string
	Status      string
	SendTime    string
}

var mailColumns = &Columns{
	ID:          "_id",
	Title:       "title",
	Content:     "content",
	Sender:      "sender",
	Receiver:    "receiver",
	Attachments: "attachments",
	Status:      "status",
	SendTime:    "send_time",
}

func NewMail(db *mongo.Database) *Mail {
	return &Mail{
		Columns:    mailColumns,
		Database:   db,
		Collection: db.Collection("mail"),
	}
}

// InsertOne executes an insert command to insert a single document into the collection.
func (dao *Mail) InsertOne(ctx context.Context, model *mail.Mail, optionsFunc ...InsertOneOptionsFunc) (*mongo.InsertOneResult, error) {
	if model == nil {
		return nil, errors.New("model is nil")
	}

	if err := dao.autofill(ctx, model); err != nil {
		return nil, err
	}

	var opts *options.InsertOneOptions

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	return dao.Collection.InsertOne(ctx, model, opts)
}

// InsertMany executes an insert command to insert multiple documents into the collection.
func (dao *Mail) InsertMany(ctx context.Context, models []*mail.Mail, optionsFunc ...InsertManyOptionsFunc) (*mongo.InsertManyResult, error) {
	if len(models) == 0 {
		return nil, errors.New("models is empty")
	}

	documents := make([]interface{}, 0, len(models))
	for i := range models {
		model := models[i]
		if err := dao.autofill(ctx, model); err != nil {
			return nil, err
		}
		documents = append(documents, model)
	}

	var opts *options.InsertManyOptions

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	return dao.Collection.InsertMany(ctx, documents, opts)
}

// UpdateOne executes an update command to update at most one document in the collection.
func (dao *Mail) UpdateOne(ctx context.Context, filterFunc FilterFunc, updateFunc UpdateFunc, optionsFunc ...UpdateOptionsFunc) (*mongo.UpdateResult, error) {
	var (
		opts   *options.UpdateOptions
		filter = filterFunc(dao.Columns)
		update = updateFunc(dao.Columns)
	)

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	return dao.Collection.UpdateOne(ctx, filter, update, opts)
}

// UpdateMany executes an update command to update documents in the collection.
func (dao *Mail) UpdateMany(ctx context.Context, filterFunc FilterFunc, updateFunc UpdateFunc, optionsFunc ...UpdateOptionsFunc) (*mongo.UpdateResult, error) {
	var (
		opts   *options.UpdateOptions
		filter = filterFunc(dao.Columns)
		update = updateFunc(dao.Columns)
	)

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	return dao.Collection.UpdateMany(ctx, filter, update, opts)
}

// FindOne executes a find command and returns a model for one document in the collection.
func (dao *Mail) FindOne(ctx context.Context, filterFunc FilterFunc, optionsFunc ...FindOneOptionsFunc) (*mail.Mail, error) {
	var (
		opts   *options.FindOneOptions
		model  = &mail.Mail{}
		filter = filterFunc(dao.Columns)
	)

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	err := dao.Collection.FindOne(ctx, filter, opts).Decode(model)
	if err != nil {
		if err == mongo.ErrNoDocuments {
			return nil, nil
		}
		return nil, err
	}

	return model, nil
}

// FindMany executes a find command and returns many models the matching documents in the collection.
func (dao *Mail) FindMany(ctx context.Context, filterFunc FilterFunc, optionsFunc ...FindManyOptionsFunc) ([]*mail.Mail, error) {
	var (
		opts   *options.FindOptions
		filter = filterFunc(dao.Columns)
	)

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	cur, err := dao.Collection.Find(ctx, filter, opts)
	if err != nil {
		return nil, err
	}

	models := make([]*mail.Mail, 0)

	if err = cur.All(ctx, &models); err != nil {
		return nil, err
	}

	return models, nil
}

// DeleteOne executes a delete command to delete at most one document from the collection.
func (dao *Mail) DeleteOne(ctx context.Context, filterFunc FilterFunc, optionsFunc ...DeleteOptionsFunc) (*mongo.DeleteResult, error) {
	var (
		opts   *options.DeleteOptions
		filter = filterFunc(dao.Columns)
	)

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	return dao.Collection.DeleteOne(ctx, filter, opts)
}

// DeleteMany executes a delete command to delete documents from the collection.
func (dao *Mail) DeleteMany(ctx context.Context, filterFunc FilterFunc, optionsFunc ...DeleteOptionsFunc) (*mongo.DeleteResult, error) {
	var (
		opts   *options.DeleteOptions
		filter = filterFunc(dao.Columns)
	)

	if len(optionsFunc) > 0 {
		opts = optionsFunc[0](dao.Columns)
	}

	return dao.Collection.DeleteMany(ctx, filter, opts)
}

// autofill when inserting data
func (dao *Mail) autofill(ctx context.Context, model *mail.Mail) error {
	return nil
}
