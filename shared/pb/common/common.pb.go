// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Gender int32

const (
	Gender_Unknown Gender = 0
	Gender_Male    Gender = 1
	Gender_Female  Gender = 2
)

var Gender_name = map[int32]string{
	0: "Unknown",
	1: "Male",
	2: "Female",
}

var Gender_value = map[string]int32{
	"Unknown": 0,
	"Male":    1,
	"Female":  2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}

func (Gender) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type User struct {
	UID                  int64    `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Account              string   `protobuf:"bytes,2,opt,name=Account,proto3" json:"Account,omitempty"`
	Nickname             string   `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Avatar               string   `protobuf:"bytes,4,opt,name=Avatar,proto3" json:"Avatar,omitempty"`
	Signature            string   `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Gender               Gender   `protobuf:"varint,6,opt,name=Gender,proto3,enum=common.Gender" json:"Gender,omitempty"`
	Level                int32    `protobuf:"varint,7,opt,name=Level,proto3" json:"Level,omitempty"`
	Experience           int32    `protobuf:"varint,8,opt,name=Experience,proto3" json:"Experience,omitempty"`
	Coin                 int32    `protobuf:"varint,9,opt,name=Coin,proto3" json:"Coin,omitempty"`
	LastLoginIP          string   `protobuf:"bytes,10,opt,name=LastLoginIP,proto3" json:"LastLoginIP,omitempty"`
	LastLoginTime        int64    `protobuf:"varint,11,opt,name=LastLoginTime,proto3" json:"LastLoginTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUID() int64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *User) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

func (m *User) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *User) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *User) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

func (m *User) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_Unknown
}

func (m *User) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *User) GetExperience() int32 {
	if m != nil {
		return m.Experience
	}
	return 0
}

func (m *User) GetCoin() int32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *User) GetLastLoginIP() string {
	if m != nil {
		return m.LastLoginIP
	}
	return ""
}

func (m *User) GetLastLoginTime() int64 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("common.Gender", Gender_name, Gender_value)
	proto.RegisterType((*User)(nil), "common.User")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xdf, 0x4a, 0x32, 0x51,
	0x14, 0xc5, 0x3d, 0x3a, 0x8e, 0xba, 0xfd, 0x3e, 0x91, 0x4d, 0xc4, 0x21, 0x62, 0x18, 0x2a, 0x62,
	0x28, 0x54, 0x28, 0x7a, 0x00, 0xfb, 0x8b, 0x60, 0x11, 0x53, 0xde, 0x74, 0x77, 0x1c, 0x37, 0x3a,
	0xe9, 0x9c, 0x23, 0x67, 0x46, 0xeb, 0x51, 0x7a, 0x9a, 0xae, 0xbb, 0xec, 0x11, 0xc2, 0x5e, 0x24,
	0x3c, 0x33, 0x9a, 0xdd, 0xad, 0xdf, 0xfa, 0xdd, 0x2c, 0xf6, 0x86, 0x7f, 0x81, 0x8a, 0x22, 0x25,
	0x9b, 0x53, 0xad, 0x12, 0x85, 0x76, 0x4a, 0x7b, 0xef, 0x79, 0xb0, 0x7a, 0x31, 0x69, 0xac, 0x43,
	0xa1, 0xd7, 0xb9, 0xe4, 0xcc, 0x65, 0x5e, 0xc1, 0x5f, 0x46, 0xe4, 0x50, 0x6a, 0x07, 0x81, 0x9a,
	0xc9, 0x84, 0xe7, 0x5d, 0xe6, 0x55, 0xfc, 0x15, 0xe2, 0x0e, 0x94, 0xef, 0xc2, 0x60, 0x2c, 0x45,
	0x44, 0xbc, 0x60, 0xd4, 0x9a, 0x71, 0x1b, 0xec, 0xf6, 0x5c, 0x24, 0x42, 0x73, 0xcb, 0x98, 0x8c,
	0x70, 0x17, 0x2a, 0x0f, 0xe1, 0x50, 0x8a, 0x64, 0xa6, 0x89, 0x17, 0x8d, 0xfa, 0x2d, 0xf0, 0x10,
	0xec, 0x1b, 0x92, 0x03, 0xd2, 0xdc, 0x76, 0x99, 0x57, 0x3b, 0xa9, 0x35, 0xb3, 0xb5, 0x69, 0xeb,
	0x67, 0x16, 0xb7, 0xa0, 0xd8, 0xa5, 0x39, 0x4d, 0x78, 0xc9, 0x65, 0x5e, 0xd1, 0x4f, 0x01, 0x1d,
	0x80, 0xab, 0xd7, 0x29, 0xe9, 0x90, 0x64, 0x40, 0xbc, 0x6c, 0xd4, 0x46, 0x83, 0x08, 0xd6, 0x85,
	0x0a, 0x25, 0xaf, 0x18, 0x63, 0x32, 0xba, 0x50, 0xed, 0x8a, 0x38, 0xe9, 0xaa, 0x61, 0x28, 0x3b,
	0xf7, 0x1c, 0xcc, 0xa2, 0xcd, 0x0a, 0x0f, 0xe0, 0xff, 0x1a, 0x1f, 0xc3, 0x88, 0x78, 0xd5, 0xdc,
	0xe6, 0x6f, 0x79, 0x74, 0xbc, 0x5a, 0x8e, 0x55, 0x28, 0xf5, 0xe4, 0x58, 0xaa, 0x17, 0x59, 0xcf,
	0x61, 0x19, 0xac, 0x5b, 0x31, 0xa1, 0x3a, 0x43, 0x00, 0xfb, 0x9a, 0xa2, 0x65, 0xce, 0x9f, 0x9f,
	0x7d, 0x2c, 0x1c, 0xf6, 0xb9, 0x70, 0xd8, 0xd7, 0xc2, 0x61, 0x6f, 0xdf, 0x4e, 0xee, 0x69, 0x7f,
	0x30, 0xa3, 0x46, 0x24, 0x46, 0xcf, 0x4a, 0x0e, 0x1b, 0x31, 0xe9, 0x39, 0xe9, 0x56, 0x3c, 0x12,
	0x9a, 0x06, 0xad, 0x69, 0xbf, 0x95, 0x1e, 0xa1, 0x6f, 0x9b, 0x9f, 0x9d, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x4a, 0x6f, 0x1a, 0x95, 0xc3, 0x01, 0x00, 0x00,
}

func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LastLoginTime != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.LastLoginTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.LastLoginIP) > 0 {
		i -= len(m.LastLoginIP)
		copy(dAtA[i:], m.LastLoginIP)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.LastLoginIP)))
		i--
		dAtA[i] = 0x52
	}
	if m.Coin != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x48
	}
	if m.Experience != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Experience))
		i--
		dAtA[i] = 0x40
	}
	if m.Level != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if m.Gender != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.Gender))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x12
	}
	if m.UID != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.UID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UID != 0 {
		n += 1 + sovCommon(uint64(m.UID))
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.Gender != 0 {
		n += 1 + sovCommon(uint64(m.Gender))
	}
	if m.Level != 0 {
		n += 1 + sovCommon(uint64(m.Level))
	}
	if m.Experience != 0 {
		n += 1 + sovCommon(uint64(m.Experience))
	}
	if m.Coin != 0 {
		n += 1 + sovCommon(uint64(m.Coin))
	}
	l = len(m.LastLoginIP)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.LastLoginTime != 0 {
		n += 1 + sovCommon(uint64(m.LastLoginTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= Gender(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Experience", wireType)
			}
			m.Experience = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Experience |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginIP", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastLoginIP = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLoginTime", wireType)
			}
			m.LastLoginTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastLoginTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
